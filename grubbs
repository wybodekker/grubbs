#!/usr/bin/env ruby
# encoding: utf-8
# vim: ts=18

Version = "1.03"

<<'DOC'
= grubbs - detect outliers in a row or column of data
= Synopsis
grubbs [options] [filename|values]

Options:
-l,--level=FLOAT	set percent confidence level to FLOAT [5]
-c,--cycles=INT	set number of cycles to INT [1]
-p,--pair	if no outliers are found, test lowest and highest pairs [false]
-n,--nlimit=INT	minimum number of observations for pair detection [14]
-k,--column=INT	read data in columns and find outliers in column INT
-t,--test	run the examples from Grubbs and Beck's publication and exit
-h,--help	print this help and exit
-v,--verbose=INT	set verbosity to INT [0]
-V,--version	print version and exit

Notes
- negative numbers are interpreted as options (and therefore leads to an error message);
  this can be prevented by using -- as the last option.
  
- long options and their arguments can be separated by either an = or a space;
  short options must be separated from their arguments with any amount of white space,
  including none.

= Description
grubbs is a driver for the |grubbs| routine in |ringstats.rb|; It
detects outliers in either a row of data given on the command line or in
one of the columns of a datafile. The file may contain one to many columns.
If neither a filename nor commandline arguments are given, data columns are
expected on standard input and the |--column| option must be used.

The data may contain numbers in any format, as well as any non-numerical
words or words consisting of numbers and non-numerical characters; however,
words that are not fully numerical are simply skipped.

The output of grubbs is a line telling index numbers (first=1) and values of the outliers.
For example:

    $ grubbs 2 3 2 3 2 4 2 3 2 3 5.1 5.2 2 3 2 3 2 
    outliers: none
    $ grubbs 2 3 2 3 2 4 2 3 2 3 5.1 5.2 2 3 2 3 2 --pair
    outliers: 11 => 5.1, 12 => 5.2

When the |--pair| option is not used, the script (as well as the
underlying routine) finds at most one outlier per cycle.
With the  |--pair| option two outliers may be found per cycle. 

= Exit value
The exit value of the script is the number of outliers found or, in case of a lethal 
error, 100.

= Options
--level=float	percent confidence level for outlier testing; default: 5;
	the only values allowed are 0.1, 0.5, 1, 2.5, 5, and 10.
--column=int	without this option, data to be tested are read from the command line.
	If the option is used, data are expected on standard input,
	and |int| is the column number of that file to be tested,
	where column 1 is the first column.
	Columns must be separated by any amount of whitespace.
--cycles=int	the number of times (default: 1) the data are cycled through the outlier detector
--pair	test lowest and highest pairs (default: false).
--nlimit	minimum number of observations for pair detection
--test	runs the script with various tests taken from Grubbs and Beck's publications and then exits
--verbose	higher values show more intermediate results. Experts only. Possible values:
	0: show result only
	1: show data and options used 
	2: show intermediate results for each cycle
--version	prints the script's version, then exits.
--help	prints a summary of usage and options, then exits.

= Examples

    $ grubbs --pair 2 3 2 600 2 300 2 3 3 2 2 4 3 2 4 3 3 2 3 2
    outliers: 4 => 600

    $ grubbs --pair 2 3 2 600 2 300 2 3 3 2 2 4 3 2 4 3 3 2 3 2
    outliers: 4 => 600

    $ grubbs --cy=2 2 3 2 600 2 300 2 3 3 2 2 4 3 2 4 3 3 2 3 2
    outliers: 4 => 600, 6 => 300

    $ grubbs 2 3 2 6 2 6 2 3 3 2 2 4 3 2 4 3 3 2 3 2
    outliers: none

    $ grubbs --pair 2 3 2 6 2 6 2 3 3 2 2 4 3 2 4 3 3 2 3 2
    outliers: 6 => 6, 4 => 6

    $ cat test
    16          16      16
    12.4        12.4    12.4
    18.5        18.5    18.5
    18.2        18.2    18.2
    30.0        131.0   133.0
    30.0        132.0   134.0
    21.8        21.8    21.8
    20.7        20.7    20.7
    20.5        20.5    20.5
    21.5        21.5    21.5
    23.4        23.4    23.4
    12.5        12.5
    16.0        16.0
    19.0        19.0
    17.0        17.0
    13.4        13.4
    22.8        22.8
    20.1        20.1
    14.5        14.5
    14.4        14.4
    19.8        19.8
    18.5        18.5
    11.3        11.3
    $ grubbs --cy=2 -k 2 test
        outliers: 6 => 132.0, 5 => 131.0
    $ grubbs --cycles=2 --column=1 test
    outliers: none
    $ grubbs --pair -k 3 test
    grubbs: n (11) < 14 - pair testing skipped
    outliers: none

= Author and copyright
Author	Wybo Dekker
Email	U{wybo@dekkerdocumenten.nl}{wybo@dekkerdocumenten.nl}
License	Released under the U{www.gnu.org/copyleft/gpl.html}{GNU General Public License}
DOC

require 'ringstats'
require 'erb'
 
def handle_options
  o = OpenStruct.new( 
    :pair      => false,
    :nlimit    => 14,
    :level     => 5,
    :cycles    => 1,
    :test      => false,
    :verbose   => 0,
    :column    => nil,
    :version   => Version
  )
  ARGV.options do |opt|
    opt.banner =  "#{MYNAME} - detect outliers in a row or column of data\n"
    opt.banner << "Usage: #{MYNAME} [options] [filename]"
  
    opt.on('-l','--level=FLOAT',Float,'set percent confidence level to FLOAT [5]') do |v|
      o.level = v
    end
    opt.on('-c','--cycles=INT',Integer,'set number of cycles to INT [1]') do |v|
        o.cycles = v
    end
    opt.on('-p','--pair','if no outliers are found, test lowest and highest pairs [false]') do
        o.pair = true
    end
    opt.on('-n','--nlimit=INT',Integer,'minimum number of observations for pair detection [14]') do |v|
        o.nlimit = v
    end
    opt.on('-k','--column=INT',Integer,'read data in columns and find outliers in column INT') do |v|
        o.column = v-1
    end
    opt.on('-t','--test',"run the examples from Grubbs and Beck's publication and exit") do
        def pr
          puts('-'*40,@m,sys($0 + " -v 1 -l #{@l} -c #{@c} -n #{@n} #{@p ? '-p' : ''} -- " + @a).output)
        end
        puts ERB.new(DATA.read,nil,'%').result(binding)
        exit
    end
    opt.on('-h','--help','print this help and exit') do
        puts opt.to_s.sub(/^ *-I\n/,'')
        exit
    end
    opt.on('-v','--verbose=INT','set verbosity to INT; default: 0') do |v|
        o.verbose = v.to_i
    end
    opt.on('-V','--version','print version and exit') do
        puts Version
        exit
    end
    opt.on('-I') do system("instscript --markdown #{MYNAME}"); exit; end
    opt.parse!
  end or quit("Error parsing options")
  o.args = ARGV
  o
end
o = init(nil,:handle_options)
stat_conf(STAT_SILENT,STAT_SILENT,STAT_SKIP)

if o.column
  data = []
  readlines.each do |l|
    data.push(l.chomp.split("\t")[o.column])
  end
else 
  data = o.args
  data.empty? && !o.column and quit("You forgot to set the --column option")
end
exit(data.grubbs(o.level,o.pair,o.cycles,o.verbose+1,o.nlimit).size)
__END__
% @m = "lowest (-100) is not an outlier at the 10% level:"
% @l,@c,@p,@n = 10,1,false,14
% @a = "0 138 109 127 127 78 92 144 110 95 47 77 62 47 78 -32 -64 0 95 96 -48 -32 -100 -31 -64 -31 -17 0 -16 -48 -31 -16 -15 0 67 -63 -63 -78 15 47 -47 -16 63 15 -48 0 -49 -16 46"
% pr
%
% @m = "highest two (855 and 933) aren't outliers:"
% @p = true
% @a = "510 739 397 435 663 473 548 285 586 473 663 816 701 248 322 548 510 739 624 473 816 510 548 435 701 663 548 855 586 248 548 548 586 473 778 397 360 739 933 663 548 701 248 548 701 586 778 739 473"
% pr
%
% @m = "the highest (596) is an outlier at the 5% level:"
% @l,@p = 5,false; @a = "568 570 570 570 572 572 572 578 584 596"
% pr
%
% @m = "the highest (596) is not an outlier at the 1% level:"
% @l = 1
% pr
%
% @m = "the highest two (584 and 596) lie out as a pair at the 1% level\nhowever, the routine requires at least 14 observations:"
% @p = true
% pr
%
% @m = "so let's set the limit to 10 observations:"
% @n = 10
% pr
